35 : 
resolvers are functions that define how data should be fetched and computed.
they are responsible for providing the data in each field
of a graphql qurey.

const resolver = {
    query : {
        hello : () => {
            return `hello query`;
        },
    },
};

36 :
Json Web Token are composed of a header, body(payload) and signature

37 : they are used for authentication.

38 : react context

40 : explain how to set up tailwind css
go into project root
then 
npm install -D tailwindcss

npx tailwindcss init

go into tailwind config file
and indicate to which files tailwind applies :
in module.exports contents add the following line:
"./src/**/*.{js,jsx,ts,tsx}"

then in index.css add the following handles:
@tailwind base;
@tailwind components;
@tailwind utilities;

//41
HOC design pattern
presentational  and logic container pattern
Hook design pattern
Provider pattern


//42 to manage events in react, we use 
APIs such as onClick, onSubmit, onChange

import React from "react"

function Example(){
    function handleClick(){
        console.log("you clicked");
    };

    return(
        <div>
            <button onClick={handleClick}> click here </button>
        </div>
    )
}


export default Example;

// 43 handling events in javascript

<button id="b1">click here</button>

belement = getElementById("b1")

belement.addEventListener("click", function(){alert("you clicked");});




//44 the basics of SSR and next.js
react is compiled on ther server side, rather than browser
pages are loading a lot faster
data is populated after
pages can also be statically generated

//45


unit testing
integration testing
snapshot testing
selenium webdriver testing

//46


//49
redux is a state management library, similar to useReducer.
it is useful to mange complex states.

//50 RESTful API stands for 
Representational State Transfer,
information is delivered via HTTP
usually in JSON 



//51 npx stands for Node Package Execute
it's a NPM package runner


//52 
var, let and const scopes :

variables declared with var are in the function scope.
variables declared with let are in the block scope.
variables declared with const are in the block scope.


var:

function test(){
    var x =3;
}
// x is undefined here

for(let i=0; i<3; i++){
    //i defined here
}

i not defined here

for (var i=0; i<3; i++){
    //i defined here
}

//i not defined here


{
const x =1;
//x defined here
}

//x not defined here








 
